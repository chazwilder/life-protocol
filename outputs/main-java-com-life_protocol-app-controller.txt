# main\java\com\life_protocol\app\controller\AchievementController.java
```
package com.life_protocol.app.controller;

import com.life_protocol.app.model.Achievement;
import com.life_protocol.app.service.AchievementService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/achievements")
public class AchievementController {

    private final AchievementService achievementService;

    @Autowired
    public AchievementController(AchievementService achievementService) {
        this.achievementService = achievementService;
    }

    @PostMapping
    public ResponseEntity<Achievement> createAchievement(@RequestBody Achievement achievement) {
        Achievement createdAchievement = achievementService.createAchievement(achievement);
        return new ResponseEntity<>(createdAchievement, HttpStatus.CREATED);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Achievement> getAchievementById(@PathVariable String id) {
        return achievementService.getAchievementById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping
    public ResponseEntity<List<Achievement>> getAllAchievements() {
        List<Achievement> achievements = achievementService.getAllAchievements();
        return ResponseEntity.ok(achievements);
    }

    @GetMapping("/category/{category}")
    public ResponseEntity<List<Achievement>> getAchievementsByCategory(@PathVariable String category) {
        List<Achievement> achievements = achievementService.getAchievementsByCategory(category);
        return ResponseEntity.ok(achievements);
    }

    @GetMapping("/experience")
    public ResponseEntity<List<Achievement>> getAchievementsByExperiencePoints(@RequestParam int maxPoints) {
        List<Achievement> achievements = achievementService.getAchievementsByExperiencePoints(maxPoints);
        return ResponseEntity.ok(achievements);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Achievement> updateAchievement(@PathVariable String id, @RequestBody Achievement achievement) {
        if (!id.equals(achievement.getId())) {
            return ResponseEntity.badRequest().build();
        }
        Achievement updatedAchievement = achievementService.updateAchievement(achievement);
        return ResponseEntity.ok(updatedAchievement);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteAchievement(@PathVariable String id) {
        achievementService.deleteAchievement(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/user/{userId}/unlocked")
    public ResponseEntity<List<Achievement>> getUnlockedAchievements(@PathVariable String userId) {
        List<Achievement> unlockedAchievements = achievementService.getUnlockedAchievements(userId);
        return ResponseEntity.ok(unlockedAchievements);
    }

    @PostMapping("/{achievementId}/unlock/{userId}")
    public ResponseEntity<Void> unlockAchievement(@PathVariable String achievementId, @PathVariable String userId) {
        achievementService.unlockAchievement(userId, achievementId);
        return ResponseEntity.noContent().build();
    }
}
```

# main\java\com\life_protocol\app\controller\AIAdviceController.java
```
package com.life_protocol.app.controller;

import com.life_protocol.app.model.AIAdvice;
import com.life_protocol.app.service.AIAdviceService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/ai-advice")
public class AIAdviceController {

    private final AIAdviceService aiAdviceService;

    @Autowired
    public AIAdviceController(AIAdviceService aiAdviceService) {
        this.aiAdviceService = aiAdviceService;
    }

    @PostMapping
    public ResponseEntity<AIAdvice> createAIAdvice(@RequestBody AIAdvice aiAdvice) {
        AIAdvice createdAdvice = aiAdviceService.createAIAdvice(aiAdvice);
        return new ResponseEntity<>(createdAdvice, HttpStatus.CREATED);
    }

    @GetMapping("/{id}")
    public ResponseEntity<AIAdvice> getAIAdviceById(@PathVariable String id) {
        return aiAdviceService.getAIAdviceById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping("/user/{userId}")
    public ResponseEntity<List<AIAdvice>> getAIAdviceByUserId(@PathVariable String userId) {
        List<AIAdvice> advice = aiAdviceService.getAIAdviceByUserId(userId);
        return ResponseEntity.ok(advice);
    }

    @GetMapping("/user/{userId}/category/{category}")
    public ResponseEntity<List<AIAdvice>> getAIAdviceByUserIdAndCategory(
            @PathVariable String userId, @PathVariable String category) {
        List<AIAdvice> advice = aiAdviceService.getAIAdviceByUserIdAndCategory(userId, category);
        return ResponseEntity.ok(advice);
    }

    @GetMapping("/user/{userId}/unread")
    public ResponseEntity<List<AIAdvice>> getUnreadAIAdviceByUserId(@PathVariable String userId) {
        List<AIAdvice> advice = aiAdviceService.getUnreadAIAdviceByUserId(userId);
        return ResponseEntity.ok(advice);
    }

    @GetMapping("/user/{userId}/recent")
    public ResponseEntity<List<AIAdvice>> getRecentAIAdviceByUserId(
            @PathVariable String userId, @RequestParam(defaultValue = "10") int limit) {
        List<AIAdvice> advice = aiAdviceService.getRecentAIAdviceByUserId(userId, limit);
        return ResponseEntity.ok(advice);
    }

    @PutMapping("/{id}")
    public ResponseEntity<AIAdvice> updateAIAdvice(@PathVariable String id, @RequestBody AIAdvice aiAdvice) {
        if (!id.equals(aiAdvice.getId())) {
            return ResponseEntity.badRequest().build();
        }
        AIAdvice updatedAdvice = aiAdviceService.updateAIAdvice(aiAdvice);
        return ResponseEntity.ok(updatedAdvice);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteAIAdvice(@PathVariable String id) {
        aiAdviceService.deleteAIAdvice(id);
        return ResponseEntity.noContent().build();
    }

    @PatchMapping("/{id}/mark-read")
    public ResponseEntity<Void> markAIAdviceAsRead(@PathVariable String id) {
        aiAdviceService.markAIAdviceAsRead(id);
        return ResponseEntity.noContent().build();
    }

    @PatchMapping("/{id}/mark-implemented")
    public ResponseEntity<Void> markAIAdviceAsImplemented(@PathVariable String id) {
        aiAdviceService.markAIAdviceAsImplemented(id);
        return ResponseEntity.noContent().build();
    }

    @PatchMapping("/{id}/rate")
    public ResponseEntity<Void> rateAIAdvice(@PathVariable String id, @RequestParam int rating) {
        aiAdviceService.rateAIAdvice(id, rating);
        return ResponseEntity.noContent().build();
    }

    @PatchMapping("/{id}/feedback")
    public ResponseEntity<Void> provideFeedbackForAIAdvice(@PathVariable String id, @RequestBody String feedback) {
        aiAdviceService.provideFeedbackForAIAdvice(id, feedback);
        return ResponseEntity.noContent().build();
    }
}
```

# main\java\com\life_protocol\app\controller\CategoryController.java
```
package com.life_protocol.app.controller;

import com.life_protocol.app.model.Category;
import com.life_protocol.app.service.CategoryService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/categories")
public class CategoryController {

    private final CategoryService categoryService;

    @Autowired
    public CategoryController(CategoryService categoryService) {
        this.categoryService = categoryService;
    }

    @PostMapping
    public ResponseEntity<Category> createCategory(@RequestBody Category category) {
        Category createdCategory = categoryService.createCategory(category);
        return new ResponseEntity<>(createdCategory, HttpStatus.CREATED);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Category> getCategoryById(@PathVariable String id) {
        return categoryService.getCategoryById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping
    public ResponseEntity<List<Category>> getAllCategories() {
        List<Category> categories = categoryService.getAllCategories();
        return ResponseEntity.ok(categories);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Category> updateCategory(@PathVariable String id, @RequestBody Category category) {
        if (!id.equals(category.getId())) {
            return ResponseEntity.badRequest().build();
        }
        Category updatedCategory = categoryService.updateCategory(category);
        return ResponseEntity.ok(updatedCategory);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteCategory(@PathVariable String id) {
        categoryService.deleteCategory(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/name/{name}")
    public ResponseEntity<Category> getCategoryByName(@PathVariable String name) {
        return categoryService.getCategoryByName(name)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping("/search")
    public ResponseEntity<List<Category>> searchCategories(@RequestParam String namePattern) {
        List<Category> categories = categoryService.searchCategories(namePattern);
        return ResponseEntity.ok(categories);
    }
}
```

# main\java\com\life_protocol\app\controller\ExerciseController.java
```
package com.life_protocol.app.controller;

import com.life_protocol.app.model.Exercise;
import com.life_protocol.app.service.ExerciseService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/exercises")
public class ExerciseController {

    private final ExerciseService exerciseService;

    @Autowired
    public ExerciseController(ExerciseService exerciseService) {
        this.exerciseService = exerciseService;
    }

    @PostMapping
    public ResponseEntity<Exercise> createExercise(@RequestBody Exercise exercise) {
        Exercise createdExercise = exerciseService.createExercise(exercise);
        return new ResponseEntity<>(createdExercise, HttpStatus.CREATED);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Exercise> getExerciseById(@PathVariable String id) {
        return exerciseService.getExerciseById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping
    public ResponseEntity<List<Exercise>> getAllExercises() {
        List<Exercise> exercises = exerciseService.getAllExercises();
        return ResponseEntity.ok(exercises);
    }

    @GetMapping("/category/{category}")
    public ResponseEntity<List<Exercise>> getExercisesByCategory(@PathVariable String category) {
        List<Exercise> exercises = exerciseService.getExercisesByCategory(category);
        return ResponseEntity.ok(exercises);
    }

    @GetMapping("/muscle-group/{muscleGroup}")
    public ResponseEntity<List<Exercise>> getExercisesByMuscleGroup(@PathVariable String muscleGroup) {
        List<Exercise> exercises = exerciseService.getExercisesByMuscleGroup(muscleGroup);
        return ResponseEntity.ok(exercises);
    }

    @GetMapping("/search")
    public ResponseEntity<List<Exercise>> searchExercises(@RequestParam String name) {
        List<Exercise> exercises = exerciseService.searchExercises(name);
        return ResponseEntity.ok(exercises);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Exercise> updateExercise(@PathVariable String id, @RequestBody Exercise exercise) {
        if (!id.equals(exercise.getId())) {
            return ResponseEntity.badRequest().build();
        }
        Exercise updatedExercise = exerciseService.updateExercise(exercise);
        return ResponseEntity.ok(updatedExercise);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteExercise(@PathVariable String id) {
        exerciseService.deleteExercise(id);
        return ResponseEntity.noContent().build();
    }
}
```

# main\java\com\life_protocol\app\controller\FoodController.java
```
package com.life_protocol.app.controller;

import com.life_protocol.app.model.Food;
import com.life_protocol.app.service.FoodService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/foods")
public class FoodController {

    private final FoodService foodService;

    @Autowired
    public FoodController(FoodService foodService) {
        this.foodService = foodService;
    }

    @PostMapping
    public ResponseEntity<Food> createFood(@RequestBody Food food) {
        Food createdFood = foodService.createFood(food);
        return new ResponseEntity<>(createdFood, HttpStatus.CREATED);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Food> getFoodById(@PathVariable String id) {
        return foodService.getFoodById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping
    public ResponseEntity<List<Food>> getAllFoods() {
        List<Food> foods = foodService.getAllFoods();
        return ResponseEntity.ok(foods);
    }

    @GetMapping("/search")
    public ResponseEntity<List<Food>> searchFoodsByName(@RequestParam String name) {
        List<Food> foods = foodService.searchFoodsByName(name);
        return ResponseEntity.ok(foods);
    }

    @GetMapping("/category/{category}")
    public ResponseEntity<List<Food>> getFoodsByCategory(@PathVariable String category) {
        List<Food> foods = foodService.getFoodsByCategory(category);
        return ResponseEntity.ok(foods);
    }

    @GetMapping("/brand/{brand}")
    public ResponseEntity<List<Food>> getFoodsByBrand(@PathVariable String brand) {
        List<Food> foods = foodService.getFoodsByBrand(brand);
        return ResponseEntity.ok(foods);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Food> updateFood(@PathVariable String id, @RequestBody Food food) {
        if (!id.equals(food.getId())) {
            return ResponseEntity.badRequest().build();
        }
        Food updatedFood = foodService.updateFood(food);
        return ResponseEntity.ok(updatedFood);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteFood(@PathVariable String id) {
        foodService.deleteFood(id);
        return ResponseEntity.noContent().build();
    }
}
```

# main\java\com\life_protocol\app\controller\GoalController.java
```
// File path: src/main/java/com/life_protocol/app/controller/GoalController.java

package com.life_protocol.app.controller;

import com.life_protocol.app.model.Goal;
import com.life_protocol.app.service.GoalService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.List;

@RestController
@RequestMapping("/api/goals")
public class GoalController {

    private final GoalService goalService;

    @Autowired
    public GoalController(GoalService goalService) {
        this.goalService = goalService;
    }

    @PostMapping
    public ResponseEntity<Goal> createGoal(@RequestBody Goal goal) {
        Goal createdGoal = goalService.createGoal(goal);
        return new ResponseEntity<>(createdGoal, HttpStatus.CREATED);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Goal> getGoalById(@PathVariable String id) {
        return goalService.getGoalById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping("/user/{userId}")
    public ResponseEntity<List<Goal>> getGoalsByUserId(@PathVariable String userId) {
        List<Goal> goals = goalService.getGoalsByUserId(userId);
        return ResponseEntity.ok(goals);
    }

    @GetMapping("/user/{userId}/active")
    public ResponseEntity<List<Goal>> getActiveGoalsByUserId(@PathVariable String userId) {
        List<Goal> activeGoals = goalService.getActiveGoalsByUserId(userId);
        return ResponseEntity.ok(activeGoals);
    }

    @GetMapping("/user/{userId}/date-range")
    public ResponseEntity<List<Goal>> getGoalsByUserIdAndDateRange(
            @PathVariable String userId,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate) {
        List<Goal> goals = goalService.getGoalsByUserIdAndDateRange(userId, startDate, endDate);
        return ResponseEntity.ok(goals);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Goal> updateGoal(@PathVariable String id, @RequestBody Goal goal) {
        if (!id.equals(goal.getId())) {
            return ResponseEntity.badRequest().build();
        }
        Goal updatedGoal = goalService.updateGoal(goal);
        return ResponseEntity.ok(updatedGoal);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteGoal(@PathVariable String id) {
        goalService.deleteGoal(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/user/{userId}/completed")
    public ResponseEntity<List<Goal>> getCompletedGoalsByUserId(@PathVariable String userId) {
        List<Goal> completedGoals = goalService.getCompletedGoalsByUserId(userId);
        return ResponseEntity.ok(completedGoals);
    }
}
```

# main\java\com\life_protocol\app\controller\NutritionLogController.java
```
package com.life_protocol.app.controller;

import com.life_protocol.app.model.NutritionLog;
import com.life_protocol.app.service.NutritionLogService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.List;

@RestController
@RequestMapping("/api/nutrition-logs")
public class NutritionLogController {

    private final NutritionLogService nutritionLogService;

    @Autowired
    public NutritionLogController(NutritionLogService nutritionLogService) {
        this.nutritionLogService = nutritionLogService;
    }

    @PostMapping
    public ResponseEntity<NutritionLog> createNutritionLog(@RequestBody NutritionLog nutritionLog) {
        NutritionLog createdLog = nutritionLogService.createNutritionLog(nutritionLog);
        return new ResponseEntity<>(createdLog, HttpStatus.CREATED);
    }

    @GetMapping("/{id}")
    public ResponseEntity<NutritionLog> getNutritionLogById(@PathVariable String id) {
        return nutritionLogService.getNutritionLogById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping("/user/{userId}")
    public ResponseEntity<List<NutritionLog>> getNutritionLogsByUserId(@PathVariable String userId) {
        List<NutritionLog> logs = nutritionLogService.getNutritionLogsByUserId(userId);
        return ResponseEntity.ok(logs);
    }

    @GetMapping("/user/{userId}/date-range")
    public ResponseEntity<List<NutritionLog>> getNutritionLogsByUserIdAndDateRange(
            @PathVariable String userId,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime start,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime end) {
        List<NutritionLog> logs = nutritionLogService.getNutritionLogsByUserIdAndDateRange(userId, start, end);
        return ResponseEntity.ok(logs);
    }

    @GetMapping("/user/{userId}/date")
    public ResponseEntity<NutritionLog> getNutritionLogByUserIdAndDate(
            @PathVariable String userId,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime date) {
        NutritionLog log = nutritionLogService.getNutritionLogByUserIdAndDate(userId, date);
        return ResponseEntity.ok(log);
    }

    @PutMapping("/{id}")
    public ResponseEntity<NutritionLog> updateNutritionLog(@PathVariable String id, @RequestBody NutritionLog nutritionLog) {
        if (!id.equals(nutritionLog.getId())) {
            return ResponseEntity.badRequest().build();
        }
        NutritionLog updatedLog = nutritionLogService.updateNutritionLog(nutritionLog);
        return ResponseEntity.ok(updatedLog);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteNutritionLog(@PathVariable String id) {
        nutritionLogService.deleteNutritionLog(id);
        return ResponseEntity.noContent().build();
    }

    @PostMapping("/{logId}/meals")
    public ResponseEntity<Void> addMealToNutritionLog(
            @PathVariable String logId,
            @RequestBody NutritionLog.MealEntry meal) {
        nutritionLogService.addMealToNutritionLog(logId, meal);
        return ResponseEntity.noContent().build();
    }

    @DeleteMapping("/{logId}/meals/{mealId}")
    public ResponseEntity<Void> removeMealFromNutritionLog(
            @PathVariable String logId,
            @PathVariable String mealId) {
        nutritionLogService.removeMealFromNutritionLog(logId, mealId);
        return ResponseEntity.noContent().build();
    }
}
```

# main\java\com\life_protocol\app\controller\ProtocolController.java
```
package com.life_protocol.app.controller;

import com.life_protocol.app.model.Protocol;
import com.life_protocol.app.service.ProtocolService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.List;

@RestController
@RequestMapping("/api/protocols")
public class ProtocolController {

    private final ProtocolService protocolService;

    @Autowired
    public ProtocolController(ProtocolService protocolService) {
        this.protocolService = protocolService;
    }

    @PostMapping
    public ResponseEntity<Protocol> createProtocol(@RequestBody Protocol protocol) {
        Protocol createdProtocol = protocolService.createProtocol(protocol);
        return new ResponseEntity<>(createdProtocol, HttpStatus.CREATED);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Protocol> getProtocolById(@PathVariable String id) {
        return protocolService.getProtocolById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping("/user/{userId}")
    public ResponseEntity<List<Protocol>> getProtocolsByUserId(@PathVariable String userId) {
        List<Protocol> protocols = protocolService.getProtocolsByUserId(userId);
        return ResponseEntity.ok(protocols);
    }

    @GetMapping("/user/{userId}/active")
    public ResponseEntity<List<Protocol>> getActiveProtocolsByUserId(@PathVariable String userId) {
        List<Protocol> activeProtocols = protocolService.getActiveProtocolsByUserId(userId);
        return ResponseEntity.ok(activeProtocols);
    }

    @GetMapping("/user/{userId}/due")
    public ResponseEntity<List<Protocol>> getDueProtocolsByUserId(
            @PathVariable String userId,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime dueDate) {
        List<Protocol> dueProtocols = protocolService.getDueProtocolsByUserId(userId, dueDate);
        return ResponseEntity.ok(dueProtocols);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Protocol> updateProtocol(@PathVariable String id, @RequestBody Protocol protocol) {
        if (!id.equals(protocol.getId())) {
            return ResponseEntity.badRequest().build();
        }
        Protocol updatedProtocol = protocolService.updateProtocol(protocol);
        return ResponseEntity.ok(updatedProtocol);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteProtocol(@PathVariable String id) {
        protocolService.deleteProtocol(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/goal/{goalId}")
    public ResponseEntity<List<Protocol>> getProtocolsByGoalId(@PathVariable String goalId) {
        List<Protocol> protocols = protocolService.getProtocolsByGoalId(goalId);
        return ResponseEntity.ok(protocols);
    }
}
```

# main\java\com\life_protocol\app\controller\SubtaskController.java
```
package com.life_protocol.app.controller;

import com.life_protocol.app.model.Subtask;
import com.life_protocol.app.service.SubtaskService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/subtasks")
public class SubtaskController {

    private final SubtaskService subtaskService;

    @Autowired
    public SubtaskController(SubtaskService subtaskService) {
        this.subtaskService = subtaskService;
    }

    @PostMapping
    public ResponseEntity<Subtask> createSubtask(@RequestBody Subtask subtask) {
        Subtask createdSubtask = subtaskService.createSubtask(subtask);
        return new ResponseEntity<>(createdSubtask, HttpStatus.CREATED);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Subtask> getSubtaskById(@PathVariable String id) {
        return subtaskService.getSubtaskById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping("/protocol/{protocolId}")
    public ResponseEntity<List<Subtask>> getSubtasksByProtocolId(@PathVariable String protocolId) {
        List<Subtask> subtasks = subtaskService.getSubtasksByProtocolId(protocolId);
        return ResponseEntity.ok(subtasks);
    }

    @GetMapping("/protocol/{protocolId}/completed")
    public ResponseEntity<List<Subtask>> getCompletedSubtasksByProtocolId(@PathVariable String protocolId) {
        List<Subtask> completedSubtasks = subtaskService.getCompletedSubtasksByProtocolId(protocolId);
        return ResponseEntity.ok(completedSubtasks);
    }

    @GetMapping("/protocol/{protocolId}/incomplete")
    public ResponseEntity<List<Subtask>> getIncompleteSubtasksByProtocolId(@PathVariable String protocolId) {
        List<Subtask> incompleteSubtasks = subtaskService.getIncompleteSubtasksByProtocolId(protocolId);
        return ResponseEntity.ok(incompleteSubtasks);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Subtask> updateSubtask(@PathVariable String id, @RequestBody Subtask subtask) {
        if (!id.equals(subtask.getId())) {
            return ResponseEntity.badRequest().build();
        }
        Subtask updatedSubtask = subtaskService.updateSubtask(subtask);
        return ResponseEntity.ok(updatedSubtask);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteSubtask(@PathVariable String id) {
        subtaskService.deleteSubtask(id);
        return ResponseEntity.noContent().build();
    }

    @PatchMapping("/{id}/complete")
    public ResponseEntity<Void> completeSubtask(@PathVariable String id) {
        subtaskService.completeSubtask(id);
        return ResponseEntity.noContent().build();
    }
}
```

# main\java\com\life_protocol\app\controller\UserController.java
```
package com.life_protocol.app.controller;

import com.life_protocol.app.model.User;
import com.life_protocol.app.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/users")
public class UserController {

    private final UserService userService;

    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping
    public ResponseEntity<User> createUser(@RequestBody User user) {
        User createdUser = userService.createUser(user);
        return new ResponseEntity<>(createdUser, HttpStatus.CREATED);
    }

    @GetMapping("/{id}")
    public ResponseEntity<User> getUserById(@PathVariable String id) {
        return userService.getUserById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping
    public ResponseEntity<List<User>> getAllUsers() {
        List<User> users = userService.getAllUsers();
        return ResponseEntity.ok(users);
    }

    @PutMapping("/{id}")
    public ResponseEntity<User> updateUser(@PathVariable String id, @RequestBody User user) {
        if (!id.equals(user.getId())) {
            return ResponseEntity.badRequest().build();
        }
        User updatedUser = userService.updateUser(user);
        return ResponseEntity.ok(updatedUser);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUser(@PathVariable String id) {
        userService.deleteUser(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/username/{username}")
    public ResponseEntity<User> getUserByUsername(@PathVariable String username) {
        return userService.getUserByUsername(username)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping("/email/{email}")
    public ResponseEntity<User> getUserByEmail(@PathVariable String email) {
        return userService.getUserByEmail(email)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }
}
```

# main\java\com\life_protocol\app\controller\UserGameStatsController.java
```
package com.life_protocol.app.controller;

import com.life_protocol.app.model.UserGameStats;
import com.life_protocol.app.service.UserGameStatsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/user-game-stats")
public class UserGameStatsController {

    private final UserGameStatsService userGameStatsService;

    @Autowired
    public UserGameStatsController(UserGameStatsService userGameStatsService) {
        this.userGameStatsService = userGameStatsService;
    }

    @PostMapping
    public ResponseEntity<UserGameStats> createUserGameStats(@RequestBody UserGameStats userGameStats) {
        UserGameStats createdStats = userGameStatsService.createUserGameStats(userGameStats);
        return new ResponseEntity<>(createdStats, HttpStatus.CREATED);
    }

    @GetMapping("/{id}")
    public ResponseEntity<UserGameStats> getUserGameStatsById(@PathVariable String id) {
        return userGameStatsService.getUserGameStatsById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping("/user/{userId}")
    public ResponseEntity<UserGameStats> getUserGameStatsByUserId(@PathVariable String userId) {
        return userGameStatsService.getUserGameStatsByUserId(userId)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping("/top/level")
    public ResponseEntity<List<UserGameStats>> getTopUsersByLevel(@RequestParam(defaultValue = "10") int limit) {
        List<UserGameStats> topUsers = userGameStatsService.getTopUsersByLevel(limit);
        return ResponseEntity.ok(topUsers);
    }

    @GetMapping("/top/xp")
    public ResponseEntity<List<UserGameStats>> getTopUsersByExperiencePoints(@RequestParam(defaultValue = "10") int limit) {
        List<UserGameStats> topUsers = userGameStatsService.getTopUsersByExperiencePoints(limit);
        return ResponseEntity.ok(topUsers);
    }

    @PutMapping("/{id}")
    public ResponseEntity<UserGameStats> updateUserGameStats(@PathVariable String id, @RequestBody UserGameStats userGameStats) {
        if (!id.equals(userGameStats.getId())) {
            return ResponseEntity.badRequest().build();
        }
        UserGameStats updatedStats = userGameStatsService.updateUserGameStats(userGameStats);
        return ResponseEntity.ok(updatedStats);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUserGameStats(@PathVariable String id) {
        userGameStatsService.deleteUserGameStats(id);
        return ResponseEntity.noContent().build();
    }

    @PatchMapping("/{userId}/add-xp")
    public ResponseEntity<Void> addExperiencePoints(@PathVariable String userId, @RequestParam int points) {
        userGameStatsService.addExperiencePoints(userId, points);
        return ResponseEntity.noContent().build();
    }

    @PatchMapping("/{userId}/update-hp")
    public ResponseEntity<Void> updateHealthPoints(@PathVariable String userId, @RequestParam int healthPoints) {
        userGameStatsService.updateHealthPoints(userId, healthPoints);
        return ResponseEntity.noContent().build();
    }

    @PatchMapping("/{userId}/increment-streak")
    public ResponseEntity<Void> incrementStreak(@PathVariable String userId) {
        userGameStatsService.incrementStreak(userId);
        return ResponseEntity.noContent().build();
    }

    @PatchMapping("/{userId}/reset-streak")
    public ResponseEntity<Void> resetStreak(@PathVariable String userId) {
        userGameStatsService.resetStreak(userId);
        return ResponseEntity.noContent().build();
    }
}
```

# main\java\com\life_protocol\app\controller\WorkoutController.java
```
package com.life_protocol.app.controller;

import com.life_protocol.app.model.Workout;
import com.life_protocol.app.service.WorkoutService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.List;

@RestController
@RequestMapping("/api/workouts")
public class WorkoutController {

    private final WorkoutService workoutService;

    @Autowired
    public WorkoutController(WorkoutService workoutService) {
        this.workoutService = workoutService;
    }

    @PostMapping
    public ResponseEntity<Workout> createWorkout(@RequestBody Workout workout) {
        Workout createdWorkout = workoutService.createWorkout(workout);
        return new ResponseEntity<>(createdWorkout, HttpStatus.CREATED);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Workout> getWorkoutById(@PathVariable String id) {
        return workoutService.getWorkoutById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping("/user/{userId}")
    public ResponseEntity<List<Workout>> getWorkoutsByUserId(@PathVariable String userId) {
        List<Workout> workouts = workoutService.getWorkoutsByUserId(userId);
        return ResponseEntity.ok(workouts);
    }

    @GetMapping("/user/{userId}/date-range")
    public ResponseEntity<List<Workout>> getWorkoutsByUserIdAndDateRange(
            @PathVariable String userId,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime start,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime end) {
        List<Workout> workouts = workoutService.getWorkoutsByUserIdAndDateRange(userId, start, end);
        return ResponseEntity.ok(workouts);
    }

    @GetMapping("/user/{userId}/recent")
    public ResponseEntity<List<Workout>> getRecentWorkoutsByUserId(
            @PathVariable String userId,
            @RequestParam(defaultValue = "10") int limit) {
        List<Workout> recentWorkouts = workoutService.getRecentWorkoutsByUserId(userId, limit);
        return ResponseEntity.ok(recentWorkouts);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Workout> updateWorkout(@PathVariable String id, @RequestBody Workout workout) {
        if (!id.equals(workout.getId())) {
            return ResponseEntity.badRequest().build();
        }
        Workout updatedWorkout = workoutService.updateWorkout(workout);
        return ResponseEntity.ok(updatedWorkout);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteWorkout(@PathVariable String id) {
        workoutService.deleteWorkout(id);
        return ResponseEntity.noContent().build();
    }

    @PostMapping("/{workoutId}/exercises/{exerciseId}")
    public ResponseEntity<Void> addExerciseToWorkout(@PathVariable String workoutId, @PathVariable String exerciseId) {
        workoutService.addExerciseToWorkout(workoutId, exerciseId);
        return ResponseEntity.noContent().build();
    }

    @DeleteMapping("/{workoutId}/exercises/{exerciseId}")
    public ResponseEntity<Void> removeExerciseFromWorkout(@PathVariable String workoutId, @PathVariable String exerciseId) {
        workoutService.removeExerciseFromWorkout(workoutId, exerciseId);
        return ResponseEntity.noContent().build();
    }
}
```

# main\java\com\life_protocol\app\controller\WorkoutRoutineController.java
```
package com.life_protocol.app.controller;

import com.life_protocol.app.model.WorkoutRoutine;
import com.life_protocol.app.service.WorkoutRoutineService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/workout-routines")
public class WorkoutRoutineController {

    private final WorkoutRoutineService workoutRoutineService;

    @Autowired
    public WorkoutRoutineController(WorkoutRoutineService workoutRoutineService) {
        this.workoutRoutineService = workoutRoutineService;
    }

    @PostMapping
    public ResponseEntity<WorkoutRoutine> createWorkoutRoutine(@RequestBody WorkoutRoutine workoutRoutine) {
        WorkoutRoutine createdRoutine = workoutRoutineService.createWorkoutRoutine(workoutRoutine);
        return new ResponseEntity<>(createdRoutine, HttpStatus.CREATED);
    }

    @GetMapping("/{id}")
    public ResponseEntity<WorkoutRoutine> getWorkoutRoutineById(@PathVariable String id) {
        return workoutRoutineService.getWorkoutRoutineById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping("/user/{userId}")
    public ResponseEntity<List<WorkoutRoutine>> getWorkoutRoutinesByUserId(@PathVariable String userId) {
        List<WorkoutRoutine> routines = workoutRoutineService.getWorkoutRoutinesByUserId(userId);
        return ResponseEntity.ok(routines);
    }

    @GetMapping("/user/{userId}/difficulty/{difficultyLevel}")
    public ResponseEntity<List<WorkoutRoutine>> getWorkoutRoutinesByDifficultyLevel(
            @PathVariable String userId, @PathVariable String difficultyLevel) {
        List<WorkoutRoutine> routines = workoutRoutineService.getWorkoutRoutinesByDifficultyLevel(userId, difficultyLevel);
        return ResponseEntity.ok(routines);
    }

    @GetMapping("/search")
    public ResponseEntity<List<WorkoutRoutine>> searchWorkoutRoutines(@RequestParam String name) {
        List<WorkoutRoutine> routines = workoutRoutineService.searchWorkoutRoutines(name);
        return ResponseEntity.ok(routines);
    }

    @PutMapping("/{id}")
    public ResponseEntity<WorkoutRoutine> updateWorkoutRoutine(@PathVariable String id, @RequestBody WorkoutRoutine workoutRoutine) {
        if (!id.equals(workoutRoutine.getId())) {
            return ResponseEntity.badRequest().build();
        }
        WorkoutRoutine updatedRoutine = workoutRoutineService.updateWorkoutRoutine(workoutRoutine);
        return ResponseEntity.ok(updatedRoutine);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteWorkoutRoutine(@PathVariable String id) {
        workoutRoutineService.deleteWorkoutRoutine(id);
        return ResponseEntity.noContent().build();
    }

    @PostMapping("/{routineId}/exercises")
    public ResponseEntity<Void> addExerciseToRoutine(
            @PathVariable String routineId,
            @RequestBody WorkoutRoutine.WorkoutExercise exercise) {
        workoutRoutineService.addExerciseToRoutine(routineId, exercise);
        return ResponseEntity.noContent().build();
    }

    @DeleteMapping("/{routineId}/exercises/{exerciseId}")
    public ResponseEntity<Void> removeExerciseFromRoutine(
            @PathVariable String routineId,
            @PathVariable String exerciseId) {
        workoutRoutineService.removeExerciseFromRoutine(routineId, exerciseId);
        return ResponseEntity.noContent().build();
    }
}
```

# main\java\com\life_protocol\app\controller\WorkoutSetController.java
```
package com.life_protocol.app.controller;

import com.life_protocol.app.model.WorkoutSet;
import com.life_protocol.app.service.WorkoutSetService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/workout-sets")
public class WorkoutSetController {

    private final WorkoutSetService workoutSetService;

    @Autowired
    public WorkoutSetController(WorkoutSetService workoutSetService) {
        this.workoutSetService = workoutSetService;
    }

    @PostMapping
    public ResponseEntity<WorkoutSet> createWorkoutSet(@RequestBody WorkoutSet workoutSet) {
        WorkoutSet createdSet = workoutSetService.createWorkoutSet(workoutSet);
        return new ResponseEntity<>(createdSet, HttpStatus.CREATED);
    }

    @GetMapping("/{id}")
    public ResponseEntity<WorkoutSet> getWorkoutSetById(@PathVariable String id) {
        return workoutSetService.getWorkoutSetById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping("/workout/{workoutId}")
    public ResponseEntity<List<WorkoutSet>> getWorkoutSetsByWorkoutId(@PathVariable String workoutId) {
        List<WorkoutSet> sets = workoutSetService.getWorkoutSetsByWorkoutId(workoutId);
        return ResponseEntity.ok(sets);
    }

    @GetMapping("/exercise/{exerciseId}")
    public ResponseEntity<List<WorkoutSet>> getWorkoutSetsByExerciseId(@PathVariable String exerciseId) {
        List<WorkoutSet> sets = workoutSetService.getWorkoutSetsByExerciseId(exerciseId);
        return ResponseEntity.ok(sets);
    }

    @GetMapping("/exercise/{exerciseId}/top")
    public ResponseEntity<List<WorkoutSet>> getTopWorkoutSetsByExerciseId(
            @PathVariable String exerciseId,
            @RequestParam(defaultValue = "10") int limit) {
        List<WorkoutSet> topSets = workoutSetService.getTopWorkoutSetsByExerciseId(exerciseId, limit);
        return ResponseEntity.ok(topSets);
    }

    @PutMapping("/{id}")
    public ResponseEntity<WorkoutSet> updateWorkoutSet(@PathVariable String id, @RequestBody WorkoutSet workoutSet) {
        if (!id.equals(workoutSet.getId())) {
            return ResponseEntity.badRequest().build();
        }
        WorkoutSet updatedSet = workoutSetService.updateWorkoutSet(workoutSet);
        return ResponseEntity.ok(updatedSet);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteWorkoutSet(@PathVariable String id) {
        workoutSetService.deleteWorkoutSet(id);
        return ResponseEntity.noContent().build();
    }
}
```

